#!/usr/bin/env python3

### Program: zol
### Author: Rauf Salamzade
### Kalan Lab
### UW Madison, Department of Medical Microbiology and Immunology

# BSD 3-Clause License
#
# Copyright (c) 2023, Kalan-Lab
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import sys
import argparse
from Bio import SeqIO
from time import sleep
from zol import util, zol
import subprocess
import pickle

zol_main_directory = '/'.join(os.path.realpath(__file__).split('/')[:-2]) + '/'

def create_parser():
	""" Parse arguments """
	parser = argparse.ArgumentParser(description="""
	Program: zol
	Author: Rauf Salamzade
	Affiliation: Kalan Lab, UW Madison, Department of Medical Microbiology and Immunology
		
	*******************************************************************************************************************								
		
                      oooooooooooo           ooooo        
                     d'''''''d888'           `888'        
                           .888P    .ooooo.   888         
                          d888'    d88' `88b  888         
                        .888P      888   888  888         
                       d888'    .P 888   888  888       o 
                     .8888888888P  `Y8bod8P' o888ooooood8 
				
	*******************************************************************************************************************								
	
	zol is a lightweight alternative that can generate reports on conservation, annotation, and evolutionary 
	statistics for defined orthologous/homologous loci (e.g. BGCs, phages, MGEs, or any genomic island / operon!).
	
	CONSIDERATIONS:

	- It is advised that multiple GenBanks from the same genome/sample be concatenated into a multi-record
	  GenBank to account for fragmentation of gene-clusters and properly calculate copy count of homolog groups.
	- Locus tags cannot contain commas!
	- Selection analyses will only be performed for homolog groups which are present in at least 4 input GenBanks.
	""", formatter_class=argparse.RawTextHelpFormatter)

	parser.add_argument('-i', '--input_dir', help='Directory with orthologous/homologous locus-specific GenBanks.\nFiles must end with ".gbk" or ".genbank".', required=False, default=None)
	parser.add_argument('-o', '--output_dir', help='Parent output/workspace directory.', required=True)
	parser.add_argument('-t', '--type', help='Type of locus. Options include: BGC, Phage, MGE.', required=False, default=None)
	parser.add_argument('-c', '--cpus', type=int, help="Number of cpus/threads to use.", required=False, default=1)
	parser.add_argument('-q', '--use_super5', action='store_true', help="Use MUSCLE super5 for alignments - faster\nbut less accurate. Default is False.", required=False, default=False)
	parser.add_argument('-f', '--fubar_selection', action='store_true', help="Run selection analysis using HyPhy's GARD\nand FUBAR methods. Default is False because these are computationally intensive.", required=False, default=False)
	parser.add_argument('-sg', '--skip_gard', action='store_true', help="Skip GARD detection of recombination breakpoints\nprior to running FUBAR selection analysis. Less\naccurate than running with GARD preliminary analysis,\nbut much faster. Default is False because these are\ncomputationally intensive.", required=False, default=False)
	parser.add_argument('-m', '--max_for_visualization', type=int, help='Maximum number of sequences to keep for clinker\nvisualization. If more sequences are provided then this\nnumber Treemer will be used to dereplicate based on gene-cluster\nwide tree. Default is 10.', required=False, default=10)
	parser.add_argument('-l', '--length', type=int, help='Specify the height/length of the heatmap plot. Default is 7.', required=False, default=7)
	parser.add_argument('-w', '--width', type=int, help='Specify the width of the heatmap plot. Default is 10.', required=False, default=14)
	parser.add_argument('-fgl', '--full_genbank_labels', action='store_true', help='Use full GenBank labels instead of just the first 20 characters.', required=False, default=False)
	args = parser.parse_args()
	return args

def zolMain():
	"""
	Void function which runs primary workflow for program.
	"""

	"""
	PARSE INPUTS
	"""
	myargs = create_parser()

	input_dir = os.path.abspath(myargs.input_dir) + '/'
	outdir = os.path.abspath(myargs.output_dir) + '/'
	type = myargs.type
	cpus = myargs.cpus
	use_super5 = myargs.use_super5
	fubar_selection = myargs.fubar_selection
	skip_gard = myargs.skip_gard
	max_for_visualization = myargs.max_for_visualization
	length = myargs.length
	width = myargs.width
	full_genbank_labels = myargs.full_genbank_labels

	try:
		assert (os.path.isdir(input_dir))
	except:
		sys.stderr.write('Input .\n')
		sys.exit(1)

	if os.path.isdir(outdir):
		sys.stderr.write("Output directory exists. Overwriting in 5 seconds ...\n ")
		sleep(5)
	else:
		os.mkdir(outdir)

	fin_outdir = outdir + 'Final_Results/'
	check_dir = outdir + 'Checkpoint_Files/'
	if not os.path.isdir(fin_outdir):
		util.setupReadyDirectory([fin_outdir])
	if not os.path.isdir(check_dir):
		util.setupReadyDirectory([check_dir])

	"""
	START WORKFLOW
	"""

	# create logging object
	log_file = outdir + 'Progress.log'
	logObject = util.createLoggerObject(log_file)
	version_string = util.parseVersionFromSetupPy()
	logObject.info('Running zol version %s' % version_string)
	sys.stdout.write('Running zol version %s\n' % version_string)

	logObject.info("Saving parameters for future records.")
	parameters_file = outdir + 'Parameter_Inputs.txt'
	parameter_values = [input_dir, outdir, type,  use_super5, fubar_selection, skip_gard, max_for_visualization,
						length, width, full_genbank_labels, cpus]
	parameter_names = ["Input directory with Loci GenBanks", "Output directory", "Locus type",
					   "Use super5 Mode in MUSCLE Alignments?", "Run FUBAR Selection Analyses?",
					   "Skip GARD Partitioning by Recombination Breakpoints?",
					   "Maximum Number of Gene Clusters to Visualize?", "Plot Height", "Plot Width",
					   "Use Full GenBank Labels?", "Number of CPUs Requested"]
	util.logParametersToFile(parameters_file, parameter_names, parameter_values)
	logObject.info("Done saving parameters!")

	# Step 1: Gather Genbanks in Input Directory
	logObject.info('--------------------\nStep 1\n--------------------\nSearching for GenBanks in the input directory')
	sys.stdout.write('--------------------\nStep 1\n--------------------\nSearching for GenBanks in the input directory\n')

	genbanks = set([])
	try:
		for dirpath, dirnames, files in os.walk(input_dir):
			for filename in files:
				if filename.endswith(".gbk") or filename.endswith(".genbank"):
					genbank_file = os.path.join(dirpath, filename)
					if util.checkValidGenBank(genbank_file):
						genbanks.add(genbank_file)
					else:
						sys.stderr.write('Ignoring file %s because it doesn\'t have CDS features or a comma found in a CDS locus tag.' % genbank_file)
						logObject.warning('Ignoring file %s because it doesn\'t have CDS features or a comma found in a CDS locus tag.' % genbank_file)
	except Exception as e:
		sys.stderr.write('Issues with parsing input directory of GenBanks!\n')
		logObject.error('Issues with parsing input directory of GenBanks!')
		sys.stderr.write(str(e) + '\n')
		sys.exit(1)

	num_gbk = len(genbanks)
	if num_gbk == 0:
		sys.stderr.write('Issues with parsing input directory of GenBanks! No GenBanks found ...\n')
		logObject.error('Issues with parsing input directory of GenBanks! No GenBanks found ...')
	else:
		sys.stdout.write('Found %d GenBanks in the input directory.\n' % num_gbk)
		logObject.info('Found %d GenBanks in the input directory.' % num_gbk)

	# Step 2: Determine Orthologs
	logObject.info('--------------------\nStep 2\n--------------------\nDetermining orthogroups')
	sys.stdout.write('--------------------\nStep 2\n--------------------\nDetermining orthogroups\n')

	prot_dir = outdir + 'CDS_Protein/'
	nucl_dir = outdir + 'CDS_Nucleotide/'
	og_dir = outdir + 'Determine_Orthogroups/'
	ortho_matrix_file = og_dir + 'Orthogroups.tsv'
	step2_check_file = check_dir + 'step2.txt'
	if not os.path.isfile(step2_check_file):
		util.setupReadyDirectory([prot_dir, nucl_dir])
		try:
			for gbk in genbanks:
				try:
					prefix = '.'.join(gbk.split('/')[-1].split('.')[:-1])
					proteins, nucleotides = util.parseGenbankForCDSProteinsAndDNA(gbk, logObject)
					protein_outf = prot_dir + prefix + '.faa'
					nucleotide_outf = nucl_dir + prefix + '.fna'
					protein_handle = open(protein_outf, 'w')
					nucleotide_handle = open(nucleotide_outf, 'w')
					for lt in proteins:
						protein_handle.write('>' + prefix + '|' + lt + '\n' + proteins[lt] + '\n')
						nucleotide_handle.write('>' + prefix + '|' + lt + '\n' + nucleotides[lt] + '\n')
					protein_handle.close()
					nucleotide_handle.close()
				except Exception as e:
					sys.stderr.write('Issues with parsing the GenBank %s\n' % gbk)
					logObject.error('Issues with parsing the GenBank %s' % gbk)
					sys.stderr.write(str(e) + '\n')
					sys.exit(1)
			fo_cmd = ['findOrthologs.py', '-p', prot_dir, '-o', og_dir, '-c', str(cpus)]
			try:
				subprocess.call(' '.join(fo_cmd), shell=True, stdout=subprocess.DEVNULL,
								stderr=subprocess.DEVNULL, executable='/bin/bash')
				assert (os.path.isfile(ortho_matrix_file))
				assert (util.checkCoreHomologGroupsExist(ortho_matrix_file))
			except Exception as e:
				logObject.error("Issue with running: %s" % ' '.join(fo_cmd))
				logObject.error(e)
				raise RuntimeError(e)
		except Exception as e:
			sys.stderr.write('Issues with determining ortholog/homolog groups!\n')
			logObject.error('Issues with determining ortholog/homolog groups!')
			sys.stderr.write(str(e) + '\n')
			sys.exit(1)
		os.system('touch %s' % step2_check_file)

	# Step 3: Create Alignments, Phylogenies and Consensus Sequences
	logObject.info('--------------------\nStep 3\n--------------------\nCreating alignments, trees and consensus sequences for homolog groups')
	sys.stdout.write('--------------------\nStep 3\n--------------------\nCreating alignments, trees and consensus sequences for homolog groups\n')
	step3_check_file = check_dir + 'step3.txt'
	proc_dir = outdir + 'Homolog_Group_Processing/'
	hg_prot_dir = proc_dir + 'HG_Protein_Sequences/'
	hg_nucl_dir = proc_dir + 'HG_Nucleotide_Sequences/'
	prot_algn_dir = proc_dir + 'HG_Protein_Alignments/'
	prot_algn_trim_dir = proc_dir + 'HG_Protein_Alignments_Trimmed/'
	codo_algn_dir = proc_dir + 'HG_Codon_Alignments/'
	codo_algn_trim_dir = proc_dir + 'HG_Codon_Alignments_Trimmed/'
	tree_dir = proc_dir + 'HG_Trees/'
	phmm_dir = proc_dir + 'HG_Profile_HMMs/'
	cons_dir = proc_dir + 'HG_Consensus_Sequences/'
	consensus_prot_seqs_faa = outdir + 'HG_Consensus_Seqs.faa'
	if not os.path.isfile(step3_check_file):
		util.setupReadyDirectory([proc_dir, prot_algn_dir, prot_algn_trim_dir, codo_algn_dir, codo_algn_trim_dir,
								  tree_dir, phmm_dir, cons_dir, hg_prot_dir, hg_nucl_dir])
		zol.partitionSequencesByHomologGroups(ortho_matrix_file, prot_dir, nucl_dir, hg_prot_dir, hg_nucl_dir, logObject)
		zol.createProteinAlignments(hg_prot_dir, prot_algn_dir, logObject, use_super5=use_super5, cpus=cpus)
		zol.createCodonAlignments(prot_algn_dir, hg_nucl_dir, codo_algn_dir, logObject)
		zol.trimAlignments(prot_algn_dir, codo_algn_dir, prot_algn_trim_dir, codo_algn_trim_dir, logObject, cpus=1)
		zol.createGeneTrees(codo_algn_trim_dir, tree_dir, logObject, cpus=1)
		zol.createProfileHMMsAndConsensusSeqs(prot_algn_dir, phmm_dir, cons_dir, logObject, cpus=1)
		consensus_prot_seqs_handle = open(consensus_prot_seqs_faa, 'w')
		for f in os.listdir(cons_dir):
			with open(cons_dir + f) as ocf:
				for rec in SeqIO.parse(ocf, 'fasta'):
					consensus_prot_seqs_handle.write('>' + f.split('.cons.faa')[0] + '\n' + str(rec.seq) + '\n')
		consensus_prot_seqs_handle.close()
		os.system('touch %s' % step3_check_file)

	# Step 4: Perform annotations
	logObject.info('--------------------\nStep 4\n--------------------\nPerforming annotations')
	sys.stdout.write('--------------------\nStep 4\n--------------------\nPerforming annotations\n')
	step4_check_file = check_dir + 'step4.txt'
	annotation_dir = outdir + 'Annotation_Results/'
	annotations = None
	annotations_pickle_file = outdir + 'Annotations.pkl'
	if not os.path.isfile(step4_check_file):
		util.setupReadyDirectory([annotation_dir])
		annotations = zol.annotateConsensusSequences(consensus_prot_seqs_faa, annotation_dir, logObject, cpus=cpus)
		with open(annotations_pickle_file, 'wb') as pickle_file:
			pickle.dump(annotations, pickle_file, protocol=pickle.HIGHEST_PROTOCOL)
		os.system('touch %s' % step4_check_file)

	if annotations == None:
		try:
			with open(annotations_pickle_file, 'rb') as handle:
				annotations = pickle.load(handle)
		except Exception as e:
			sys.stderr.write('Issues with reading in annotations from pickle file (might not exist). Please rerun annotations after deleting checkpoint file step4.txt.!\n')
			logObject.error('Issues with reading in annotations from pickle file (might not exist). Please rerun annotations after deleting checkpoint file step4.txt.!\n')
			sys.stderr.write(str(e) + '\n')
			sys.exit(1)
	#print(annotations.keys())

	# Step 5: Determine consensus order, conservation, and median homolog group lengths
	logObject.info('--------------------\nStep 5\n--------------------\nDetermining consensus order, conservation, and median lengths of homolog groups')
	sys.stdout.write('--------------------\nStep 5\n--------------------\nDetermining consensus order, conservation, and median lengths of homolog groups\n')
	step5_check_file = check_dir + 'step5.txt'
	hg_stats_pickle_file = outdir + 'HG_Statistics.pkl'
	hg_stats = None
	if not os.path.isfile(step5_check_file):
		hg_single_copy_status, hg_prop_samples, hg_median_lengths, hg_lts  = zol.determineHGStats(ortho_matrix_file, hg_nucl_dir, logObject)
		hg_order_scores = zol.determineConsensusOrderOfHGs(genbanks, ortho_matrix_file, logObject)
		hg_stats = {'hg_single_copy_status': hg_single_copy_status, 'hg_prop_samples': hg_prop_samples,
					'hg_median_lengths': hg_median_lengths, 'hg_order_scores': hg_order_scores, 'hg_locus_tags': hg_lts}
		with open(hg_stats_pickle_file, 'wb') as pickle_file:
			pickle.dump(hg_stats, pickle_file)
		os.system('touch %s' % step5_check_file)

	if hg_stats == None:
		try:
			with open(hg_stats_pickle_file, 'rb') as handle:
				hg_stats = pickle.load(handle)
		except Exception as e:
			sys.stderr.write('Issues with reading in homolog groups stats from pickle file (might not exist). Please rerun annotations after deleting checkpoint file step5.txt!\n')
			logObject.error('Issues with reading in homolog groups stats from pickle file (might not exist). Please rerun annotations after deleting checkpoint file step5.txt!\n')
			sys.stderr.write(str(e) + '\n')
			sys.exit(1)

	#print(hg_stats.keys())
	# Step 6: Perform genetic/population/evolutionary statistics
	logObject.info('--------------------\nStep 6\n--------------------\nRunning evolutionary analyses')
	sys.stdout.write('--------------------\nStep 6\n--------------------\nRunning evolutionary analyses\n')
	step6_check_file = check_dir + 'step6.txt'
	evo_stats = None
	evo_stats_pickle_file = outdir + 'Evolutionary_Statistics.pkl'
	evo_results_dir = outdir + 'Evolutionary_Analyses/'
	gard_results_dir = evo_results_dir + 'GARD_Results/'
	fubar_results_dir = evo_results_dir + 'FUBAR_Results/'
	gtc_results_dir = evo_results_dir + 'Gene_Tree_Congruence_Results/'
	if not os.path.isfile(step6_check_file):
		util.setupReadyDirectory([evo_results_dir, gard_results_dir, fubar_results_dir, gtc_results_dir])
		tajimas_d = zol.runTajimasDAnalysis(codo_algn_trim_dir, logObject)
		gard_partitions = {}
		fubar_sel_props = {}
		fubar_sel_sites = {}
		if fubar_selection:
			gard_partitions, fubar_sel_props, fubar_sel_sites = zol.runHyphyAnalyses(codo_algn_dir, tree_dir,
																					 gard_results_dir,
																					 fubar_results_dir, logObject,
																				  	 gard_mode='Faster',
																					 skip_gard=skip_gard, cpus=cpus)
		gc_tree, gtc_score = zol.runGeneTreeCongruenceAnalysis(genbanks, tree_dir, gtc_results_dir, logObject)
		evo_stats = {'tajimas_d': tajimas_d, 'gard_partitions': gard_partitions,
							 'fubar_sel_props': fubar_sel_props, 'fubar_sel_sites': fubar_sel_sites,
							 'gene_cluster_tree': gc_tree, 'gene_tree_congruence': gtc_score}
		with open(evo_stats_pickle_file, 'wb') as pickle_file:
			pickle.dump(evo_stats, pickle_file)
		os.system('touch %s' % step6_check_file)

	if evo_stats == None:
		try:
			with open(evo_stats_pickle_file, 'rb') as handle:
				evo_stats = pickle.load(handle)
		except Exception as e:
			sys.stderr.write('Issues with reading in homolog groups evo stats from pickle file (might not exist). Please rerun annotations after deleting checkpoint file step6.txt!\n')
			logObject.error('Issues with reading in homolog groups evo stats from pickle file (might not exist). Please rerun annotations after deleting checkpoint file step6.txt!\n')
			sys.stderr.write(str(e) + '\n')
			sys.exit(1)
	#print(evo_stats.keys())

	# Step 7: Put together report
	logObject.info('--------------------\nStep 7\n--------------------\nPutting together final report')
	sys.stdout.write('--------------------\nStep 7\n--------------------\nPutting together final report\n')
	step7_check_file = check_dir + 'step7.txt'
	final_report_xlsx = fin_outdir + 'Consolidated_Report.xlsx'
	final_report_tsv = fin_outdir + 'Consolidated_Report.tsv'
	if not os.path.isfile(step7_check_file):
		zol.consolidateReport(hg_stats, annotations, evo_stats, final_report_xlsx, final_report_tsv, logObject)
		os.system('touch %s' % step7_check_file)

	# Step 8: Create interactive visualization using clinker!
	logObject.info('--------------------\nStep 8\n--------------------\nCreating heatmap visualization of gene cluster representative instances')
	sys.stdout.write('--------------------\nStep 8\n--------------------\nCreating heatmap visualization of gene cluster representative instances\n')
	step8_check_file = check_dir + 'step8.txt'
	plot_workspace_dir = outdir + 'Plot_Workspace/'
	if not os.path.isfile(step8_check_file):
		util.setupReadyDirectory([plot_workspace_dir])
		representative_genbanks = zol.runTreemmer(genbanks, evo_stats['gene_cluster_tree'], max_for_visualization, logObject)
		plot_result_pdf = fin_outdir + 'Heatmap_Overview.pdf'
		zol.plotHeatmap(hg_stats, representative_genbanks, plot_result_pdf, plot_workspace_dir, logObject, height=length, width=width, full_genbank_labels=full_genbank_labels)
		zol.runClinker(genbanks, hg_lts, representative_genbanks, fin_outdir, plot_workspace_dir, logObject)
		os.system('touch %s' % step8_check_file)

	# Close logging object and exit
	logObject.info('******************\nzol finished!\n******************\nFinal results can be found at: %s' % fin_outdir)
	sys.stdout.write('******************\nzol finished!\n******************\nFinal results can be found at: %s\n' % fin_outdir)
	util.closeLoggerObject(logObject)
	sys.exit(0)

if __name__ == '__main__':
	zolMain()